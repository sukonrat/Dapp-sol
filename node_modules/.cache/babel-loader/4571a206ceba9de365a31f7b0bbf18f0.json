{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { EventEmitter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignatureError } from '@solana/wallet-adapter-base';\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\nexport class LedgerWalletAdapter extends EventEmitter {\n  constructor(config = {}) {\n    super();\n\n    this._disconnected = () => {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\n    this._connecting = false;\n    this._transport = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    // @FIXME: could return !!navigator.hid\n    return true;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._transport;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let transport;\n\n        try {\n          transport = yield TransportWebHid.create();\n        } catch (error) {\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = yield getPublicKey(transport, this._derivationPath);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        transport.on('disconnect', this._disconnected);\n        this._transport = transport;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n\n        try {\n          yield transport.close();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error.message, error));\n        }\n\n        this.emit('disconnect');\n      }\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const signature = yield signTransaction(transport, transaction, this._derivationPath);\n          transaction.addSignature(publicKey, signature);\n        } catch (error) {\n          throw new WalletSignatureError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const derivationPath = this._derivationPath;\n\n          for (const transaction of transactions) {\n            const signature = yield signTransaction(transport, transaction, derivationPath);\n            transaction.addSignature(publicKey, signature);\n          }\n        } catch (error) {\n          throw new WalletSignatureError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { EventEmitter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignatureError, } from '@solana/wallet-adapter-base';\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\nexport class LedgerWalletAdapter extends EventEmitter {\n    constructor(config = {}) {\n        super();\n        this._disconnected = () => {\n            const transport = this._transport;\n            if (transport) {\n                transport.off('disconnect', this._disconnected);\n                this._transport = null;\n                this._publicKey = null;\n                this.emit('error', new WalletDisconnectedError());\n                this.emit('disconnect');\n            }\n        };\n        this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\n        this._connecting = false;\n        this._transport = null;\n        this._publicKey = null;\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get ready() {\n        // @FIXME: could return !!navigator.hid\n        return true;\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    get connected() {\n        return !!this._transport;\n    }\n    get autoApprove() {\n        return false;\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.connected || this.connecting)\n                    return;\n                this._connecting = true;\n                let transport;\n                try {\n                    transport = yield TransportWebHid.create();\n                }\n                catch (error) {\n                    throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                let publicKey;\n                try {\n                    publicKey = yield getPublicKey(transport, this._derivationPath);\n                }\n                catch (error) {\n                    throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                transport.on('disconnect', this._disconnected);\n                this._transport = transport;\n                this._publicKey = publicKey;\n                this.emit('connect');\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n            finally {\n                this._connecting = false;\n            }\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const transport = this._transport;\n            if (transport) {\n                transport.off('disconnect', this._disconnected);\n                this._transport = null;\n                this._publicKey = null;\n                try {\n                    yield transport.close();\n                }\n                catch (error) {\n                    this.emit('error', new WalletDisconnectionError(error.message, error));\n                }\n                this.emit('disconnect');\n            }\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const transport = this._transport;\n                const publicKey = this._publicKey;\n                if (!transport || !publicKey)\n                    throw new WalletNotConnectedError();\n                try {\n                    const signature = yield signTransaction(transport, transaction, this._derivationPath);\n                    transaction.addSignature(publicKey, signature);\n                }\n                catch (error) {\n                    throw new WalletSignatureError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                return transaction;\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const transport = this._transport;\n                const publicKey = this._publicKey;\n                if (!transport || !publicKey)\n                    throw new WalletNotConnectedError();\n                try {\n                    const derivationPath = this._derivationPath;\n                    for (const transaction of transactions) {\n                        const signature = yield signTransaction(transport, transaction, derivationPath);\n                        transaction.addSignature(publicKey, signature);\n                    }\n                }\n                catch (error) {\n                    throw new WalletSignatureError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                return transactions;\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}