{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nexport const WalletProvider = ({\n  wallets,\n  autoConnect = false,\n  onError = error => console.error(error),\n  localStorageKey = 'walletName',\n  children\n}) => {\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [wallet, setWallet] = useState();\n  const [adapter, setAdapter] = useState();\n  const [ready, setReady] = useState(false);\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [autoApprove, setAutoApprove] = useState(false);\n  const [publicKey, setPublicKey] = useState(null);\n  const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n    walletsByName[wallet.name] = wallet;\n    return walletsByName;\n  }, {}), [wallets]);\n  const select = useCallback(selected => __awaiter(void 0, void 0, void 0, function* () {\n    if (name === selected) return;\n    if (adapter) yield adapter.disconnect();\n    setName(selected);\n  }), [name, adapter, setName]);\n  const reset = useCallback(() => {\n    setReady(false);\n    setConnecting(false);\n    setDisconnecting(false);\n    setConnected(false);\n    setAutoApprove(false);\n    setPublicKey(null);\n  }, [setReady, setConnecting, setDisconnecting, setConnected, setAutoApprove, setPublicKey]);\n  const onReady = useCallback(() => setReady(true), [setReady]);\n  const onConnect = useCallback(() => {\n    if (!adapter) return;\n    setConnected(true);\n    setAutoApprove(adapter.autoApprove);\n    setPublicKey(adapter.publicKey);\n  }, [adapter, setConnected, setAutoApprove, setPublicKey]);\n  const onDisconnect = useCallback(() => reset(), [reset]);\n  const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (connecting || disconnecting || connected) return;\n\n    if (!wallet || !adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!ready) {\n      window.open(wallet.url, '_blank');\n      const error = new WalletNotReadyError();\n      onError(error);\n      throw error;\n    }\n\n    setConnecting(true);\n\n    try {\n      yield adapter.connect();\n    } finally {\n      setConnecting(false);\n    }\n  }), [connecting, disconnecting, connected, adapter, onError, ready, wallet, setConnecting]);\n  const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (disconnecting) return;\n\n    if (!adapter) {\n      yield select(null);\n      return;\n    }\n\n    setDisconnecting(true);\n\n    try {\n      yield adapter.disconnect();\n    } finally {\n      setDisconnecting(false);\n      yield select(null);\n    }\n  }), [disconnecting, adapter, select, setDisconnecting]);\n  const signTransaction = useCallback(transaction => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signTransaction(transaction);\n  }), [adapter, onError, connected]);\n  const signAllTransactions = useCallback(transactions => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) {\n      const error = new WalletNotSelectedError();\n      onError(error);\n      throw error;\n    }\n\n    if (!connected) {\n      const error = new WalletNotConnectedError();\n      onError(error);\n      throw error;\n    }\n\n    return yield adapter.signAllTransactions(transactions);\n  }), [adapter, onError, connected]); // Reset state and set the wallet, adapter, and ready state when the name changes\n\n  useEffect(() => {\n    reset();\n    const wallet = name ? walletsByName[name] : undefined;\n    const adapter = wallet ? wallet.adapter() : undefined;\n    setWallet(wallet);\n    setAdapter(adapter);\n    setReady(adapter ? adapter.ready : false);\n  }, [reset, name, walletsByName, setWallet, setAdapter, setReady]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return () => {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (autoConnect && adapter && ready) {\n      (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n          setConnecting(true);\n\n          try {\n            yield adapter.connect();\n          } catch (error) {// Don't throw error, but onError will still be called\n          } finally {\n            setConnecting(false);\n          }\n        });\n      })();\n    }\n  }, [autoConnect, adapter, ready, setConnecting]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets,\n      autoConnect,\n      wallet,\n      select,\n      publicKey,\n      ready,\n      connecting,\n      disconnecting,\n      connected,\n      autoApprove,\n      connect,\n      disconnect,\n      signTransaction,\n      signAllTransactions\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAqC,uBAArC,EAA8D,mBAA9D,QAAyF,6BAAzF;AAGA,OAAO,KAAP,IAA+B,WAA/B,EAA4C,SAA5C,EAAuD,OAAvD,EAAgE,QAAhE,QAAgF,OAAhF;AACA,SAAS,sBAAT,QAAuC,UAAvC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,aAAT,QAA8B,aAA9B;AAUA,OAAO,MAAM,cAAc,GAA4B,CAAC;AACpD,EAAA,OADoD;AAEpD,EAAA,WAAW,GAAG,KAFsC;AAGpD,EAAA,OAAO,GAAI,KAAD,IAAwB,OAAO,CAAC,KAAR,CAAc,KAAd,CAHkB;AAIpD,EAAA,eAAe,GAAG,YAJkC;AAKpD,EAAA;AALoD,CAAD,KAMlD;AACD,QAAM,CAAC,IAAD,EAAO,OAAP,IAAkB,eAAe,CAAoB,eAApB,EAAqC,IAArC,CAAvC;AACA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,EAApC;AACA,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,QAAQ,EAAtC;AACA,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAAC,UAAD,EAAa,aAAb,IAA8B,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC,aAAD,EAAgB,gBAAhB,IAAoC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC,SAAD,EAAY,YAAZ,IAA4B,QAAQ,CAAmB,IAAnB,CAA1C;AAEA,QAAM,aAAa,GAAG,OAAO,CACzB,MACI,OAAO,CAAC,MAAR,CAAe,CAAC,aAAD,EAAgB,MAAhB,KAA0B;AACrC,IAAA,aAAa,CAAC,MAAM,CAAC,IAAR,CAAb,GAA6B,MAA7B;AACA,WAAO,aAAP;AACH,GAHD,EAGG,EAHH,CAFqB,EAMzB,CAAC,OAAD,CANyB,CAA7B;AASA,QAAM,MAAM,GAAG,WAAW,CACf,QAAP,IAAsC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClC,QAAI,IAAI,KAAK,QAAb,EAAuB;AACvB,QAAI,OAAJ,EAAa,MAAM,OAAO,CAAC,UAAR,EAAN;AACb,IAAA,OAAO,CAAC,QAAD,CAAP;AACH,GAJqC,CADhB,EAMtB,CAAC,IAAD,EAAO,OAAP,EAAgB,OAAhB,CANsB,CAA1B;AASA,QAAM,KAAK,GAAG,WAAW,CAAC,MAAK;AAC3B,IAAA,QAAQ,CAAC,KAAD,CAAR;AACA,IAAA,aAAa,CAAC,KAAD,CAAb;AACA,IAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,IAAA,YAAY,CAAC,KAAD,CAAZ;AACA,IAAA,cAAc,CAAC,KAAD,CAAd;AACA,IAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAPwB,EAOtB,CAAC,QAAD,EAAW,aAAX,EAA0B,gBAA1B,EAA4C,YAA5C,EAA0D,cAA1D,EAA0E,YAA1E,CAPsB,CAAzB;AASA,QAAM,OAAO,GAAG,WAAW,CAAC,MAAM,QAAQ,CAAC,IAAD,CAAf,EAAuB,CAAC,QAAD,CAAvB,CAA3B;AAEA,QAAM,SAAS,GAAG,WAAW,CAAC,MAAK;AAC/B,QAAI,CAAC,OAAL,EAAc;AAEd,IAAA,YAAY,CAAC,IAAD,CAAZ;AACA,IAAA,cAAc,CAAC,OAAO,CAAC,WAAT,CAAd;AACA,IAAA,YAAY,CAAC,OAAO,CAAC,SAAT,CAAZ;AACH,GAN4B,EAM1B,CAAC,OAAD,EAAU,YAAV,EAAwB,cAAxB,EAAwC,YAAxC,CAN0B,CAA7B;AAQA,QAAM,YAAY,GAAG,WAAW,CAAC,MAAM,KAAK,EAAZ,EAAgB,CAAC,KAAD,CAAhB,CAAhC;AAEA,QAAM,OAAO,GAAG,WAAW,CAAC,MAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACnC,QAAI,UAAU,IAAI,aAAd,IAA+B,SAAnC,EAA8C;;AAE9C,QAAI,CAAC,MAAD,IAAW,CAAC,OAAhB,EAAyB;AACrB,YAAM,KAAK,GAAG,IAAI,sBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AACD,QAAI,CAAC,KAAL,EAAY;AACR,MAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,GAAnB,EAAwB,QAAxB;AAEA,YAAM,KAAK,GAAG,IAAI,mBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AAED,IAAA,aAAa,CAAC,IAAD,CAAb;;AACA,QAAI;AACA,YAAM,OAAO,CAAC,OAAR,EAAN;AACH,KAFD,SAEU;AACN,MAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GAtBsC,CAAZ,EAsBxB,CAAC,UAAD,EAAa,aAAb,EAA4B,SAA5B,EAAuC,OAAvC,EAAgD,OAAhD,EAAyD,KAAzD,EAAgE,MAAhE,EAAwE,aAAxE,CAtBwB,CAA3B;AAwBA,QAAM,UAAU,GAAG,WAAW,CAAC,MAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACtC,QAAI,aAAJ,EAAmB;;AAEnB,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,MAAM,CAAC,IAAD,CAAZ;AACA;AACH;;AAED,IAAA,gBAAgB,CAAC,IAAD,CAAhB;;AACA,QAAI;AACA,YAAM,OAAO,CAAC,UAAR,EAAN;AACH,KAFD,SAEU;AACN,MAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,YAAM,MAAM,CAAC,IAAD,CAAZ;AACH;AACJ,GAfyC,CAAZ,EAe3B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,MAAzB,EAAiC,gBAAjC,CAf2B,CAA9B;AAiBA,QAAM,eAAe,GAAG,WAAW,CACxB,WAAP,IAAmC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC/B,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,KAAK,GAAG,IAAI,sBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AACD,QAAI,CAAC,SAAL,EAAgB;AACZ,YAAM,KAAK,GAAG,IAAI,uBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AAED,WAAO,MAAM,OAAO,CAAC,eAAR,CAAwB,WAAxB,CAAb;AACH,GAbkC,CADJ,EAe/B,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,CAf+B,CAAnC;AAkBA,QAAM,mBAAmB,GAAG,WAAW,CAC5B,YAAP,IAAsC,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClC,QAAI,CAAC,OAAL,EAAc;AACV,YAAM,KAAK,GAAG,IAAI,sBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AACD,QAAI,CAAC,SAAL,EAAgB;AACZ,YAAM,KAAK,GAAG,IAAI,uBAAJ,EAAd;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACA,YAAM,KAAN;AACH;;AAED,WAAO,MAAM,OAAO,CAAC,mBAAR,CAA4B,YAA5B,CAAb;AACH,GAbqC,CADH,EAenC,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,CAfmC,CAAvC,CA7GC,CA+HD;;AACA,EAAA,SAAS,CAAC,MAAK;AACX,IAAA,KAAK;AAEL,UAAM,MAAM,GAAG,IAAI,GAAG,aAAa,CAAC,IAAD,CAAhB,GAAyB,SAA5C;AACA,UAAM,OAAO,GAAG,MAAM,GAAG,MAAM,CAAC,OAAP,EAAH,GAAsB,SAA5C;AAEA,IAAA,SAAS,CAAC,MAAD,CAAT;AACA,IAAA,UAAU,CAAC,OAAD,CAAV;AACA,IAAA,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,KAAX,GAAmB,KAA3B,CAAR;AACH,GATQ,EASN,CAAC,KAAD,EAAQ,IAAR,EAAc,aAAd,EAA6B,SAA7B,EAAwC,UAAxC,EAAoD,QAApD,CATM,CAAT,CAhIC,CA2ID;;AACA,EAAA,SAAS,CAAC,MAAK;AACX,QAAI,OAAJ,EAAa;AACT,MAAA,OAAO,CAAC,EAAR,CAAW,OAAX,EAAoB,OAApB;AACA,MAAA,OAAO,CAAC,EAAR,CAAW,SAAX,EAAsB,SAAtB;AACA,MAAA,OAAO,CAAC,EAAR,CAAW,YAAX,EAAyB,YAAzB;AACA,MAAA,OAAO,CAAC,EAAR,CAAW,OAAX,EAAoB,OAApB;AACA,aAAO,MAAK;AACR,QAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,OAArB;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,SAAvB;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,YAAZ,EAA0B,YAA1B;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,OAArB;AACH,OALD;AAMH;AACJ,GAbQ,EAaN,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,EAA8B,YAA9B,EAA4C,OAA5C,CAbM,CAAT,CA5IC,CA2JD;;AACA,EAAA,SAAS,CAAC,MAAK;AACX,QAAI,WAAW,IAAI,OAAf,IAA0B,KAA9B,EAAqC;AACjC,OAAC,YAAA;;AACG,UAAA,aAAa,CAAC,IAAD,CAAb;;AACA,cAAI;AACA,kBAAM,OAAO,CAAC,OAAR,EAAN;AACH,WAFD,CAEE,OAAO,KAAP,EAAc,CACZ;AACH,WAJD,SAIU;AACN,YAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,S;AAAA,OATD;AAUH;AACJ,GAbQ,EAaN,CAAC,WAAD,EAAc,OAAd,EAAuB,KAAvB,EAA8B,aAA9B,CAbM,CAAT;AAeA,SACI,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;AACnB,IAAA,KAAK,EAAE;AACH,MAAA,OADG;AAEH,MAAA,WAFG;AAGH,MAAA,MAHG;AAIH,MAAA,MAJG;AAKH,MAAA,SALG;AAMH,MAAA,KANG;AAOH,MAAA,UAPG;AAQH,MAAA,aARG;AASH,MAAA,SATG;AAUH,MAAA,WAVG;AAWH,MAAA,OAXG;AAYH,MAAA,UAZG;AAaH,MAAA,eAbG;AAcH,MAAA;AAdG;AADY,GAAvB,EAkBK,QAlBL,CADJ;AAsBH,CAvMM","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nexport const WalletProvider = ({ wallets, autoConnect = false, onError = (error) => console.error(error), localStorageKey = 'walletName', children, }) => {\n    const [name, setName] = useLocalStorage(localStorageKey, null);\n    const [wallet, setWallet] = useState();\n    const [adapter, setAdapter] = useState();\n    const [ready, setReady] = useState(false);\n    const [connecting, setConnecting] = useState(false);\n    const [disconnecting, setDisconnecting] = useState(false);\n    const [connected, setConnected] = useState(false);\n    const [autoApprove, setAutoApprove] = useState(false);\n    const [publicKey, setPublicKey] = useState(null);\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n        walletsByName[wallet.name] = wallet;\n        return walletsByName;\n    }, {}), [wallets]);\n    const select = useCallback((selected) => __awaiter(void 0, void 0, void 0, function* () {\n        if (name === selected)\n            return;\n        if (adapter)\n            yield adapter.disconnect();\n        setName(selected);\n    }), [name, adapter, setName]);\n    const reset = useCallback(() => {\n        setReady(false);\n        setConnecting(false);\n        setDisconnecting(false);\n        setConnected(false);\n        setAutoApprove(false);\n        setPublicKey(null);\n    }, [setReady, setConnecting, setDisconnecting, setConnected, setAutoApprove, setPublicKey]);\n    const onReady = useCallback(() => setReady(true), [setReady]);\n    const onConnect = useCallback(() => {\n        if (!adapter)\n            return;\n        setConnected(true);\n        setAutoApprove(adapter.autoApprove);\n        setPublicKey(adapter.publicKey);\n    }, [adapter, setConnected, setAutoApprove, setPublicKey]);\n    const onDisconnect = useCallback(() => reset(), [reset]);\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (connecting || disconnecting || connected)\n            return;\n        if (!wallet || !adapter) {\n            const error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n        }\n        if (!ready) {\n            window.open(wallet.url, '_blank');\n            const error = new WalletNotReadyError();\n            onError(error);\n            throw error;\n        }\n        setConnecting(true);\n        try {\n            yield adapter.connect();\n        }\n        finally {\n            setConnecting(false);\n        }\n    }), [connecting, disconnecting, connected, adapter, onError, ready, wallet, setConnecting]);\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (disconnecting)\n            return;\n        if (!adapter) {\n            yield select(null);\n            return;\n        }\n        setDisconnecting(true);\n        try {\n            yield adapter.disconnect();\n        }\n        finally {\n            setDisconnecting(false);\n            yield select(null);\n        }\n    }), [disconnecting, adapter, select, setDisconnecting]);\n    const signTransaction = useCallback((transaction) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter) {\n            const error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n        }\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            onError(error);\n            throw error;\n        }\n        return yield adapter.signTransaction(transaction);\n    }), [adapter, onError, connected]);\n    const signAllTransactions = useCallback((transactions) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter) {\n            const error = new WalletNotSelectedError();\n            onError(error);\n            throw error;\n        }\n        if (!connected) {\n            const error = new WalletNotConnectedError();\n            onError(error);\n            throw error;\n        }\n        return yield adapter.signAllTransactions(transactions);\n    }), [adapter, onError, connected]);\n    // Reset state and set the wallet, adapter, and ready state when the name changes\n    useEffect(() => {\n        reset();\n        const wallet = name ? walletsByName[name] : undefined;\n        const adapter = wallet ? wallet.adapter() : undefined;\n        setWallet(wallet);\n        setAdapter(adapter);\n        setReady(adapter ? adapter.ready : false);\n    }, [reset, name, walletsByName, setWallet, setAdapter, setReady]);\n    // Setup and teardown event listeners when the adapter changes\n    useEffect(() => {\n        if (adapter) {\n            adapter.on('ready', onReady);\n            adapter.on('connect', onConnect);\n            adapter.on('disconnect', onDisconnect);\n            adapter.on('error', onError);\n            return () => {\n                adapter.off('ready', onReady);\n                adapter.off('connect', onConnect);\n                adapter.off('disconnect', onDisconnect);\n                adapter.off('error', onError);\n            };\n        }\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    useEffect(() => {\n        if (autoConnect && adapter && ready) {\n            (function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    setConnecting(true);\n                    try {\n                        yield adapter.connect();\n                    }\n                    catch (error) {\n                        // Don't throw error, but onError will still be called\n                    }\n                    finally {\n                        setConnecting(false);\n                    }\n                });\n            })();\n        }\n    }, [autoConnect, adapter, ready, setConnecting]);\n    return (React.createElement(WalletContext.Provider, { value: {\n            wallets,\n            autoConnect,\n            wallet,\n            select,\n            publicKey,\n            ready,\n            connecting,\n            disconnecting,\n            connected,\n            autoApprove,\n            connect,\n            disconnect,\n            signTransaction,\n            signAllTransactions,\n        } }, children));\n};\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}