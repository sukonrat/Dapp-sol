var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CopyOutlined as CopyIcon, DisconnectOutlined as DisconnectIcon, SwapOutlined as SwitchIcon, } from '@ant-design/icons';
import { useWallet } from '@solana/wallet-adapter-react';
import { Button, Dropdown, Menu } from 'antd';
import React, { useMemo } from 'react';
import { useWalletModal } from './useWalletModal';
import { WalletConnectButton } from './WalletConnectButton';
import { WalletIcon } from './WalletIcon';
import { WalletModalButton } from './WalletModalButton';
export const WalletMultiButton = (_a) => {
    var { type = 'primary', size = 'large', children, disabled, onClick } = _a, props = __rest(_a, ["type", "size", "children", "disabled", "onClick"]);
    const { publicKey, wallet, disconnect } = useWallet();
    const { setVisible } = useWalletModal();
    const base58 = useMemo(() => publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58(), [publicKey]);
    const content = useMemo(() => {
        if (children)
            return children;
        if (!wallet || !base58)
            return null;
        return base58.substr(0, 4) + '..' + base58.substr(-4, 4);
    }, [children, wallet, base58]);
    if (!wallet) {
        return React.createElement(WalletModalButton, Object.assign({}, props));
    }
    if (!base58) {
        return React.createElement(WalletConnectButton, Object.assign({}, props));
    }
    return (React.createElement(Dropdown, { overlay: React.createElement(Menu, { style: { padding: 0, marginTop: -44 } },
            React.createElement(Menu.Item, { style: { padding: 0 } },
                React.createElement(Button, Object.assign({ icon: React.createElement(WalletIcon, { wallet: wallet }), type: type, size: size, style: { textAlign: 'left' }, block: true }, props), wallet.name)),
            React.createElement(Menu.Item, { onClick: () => __awaiter(void 0, void 0, void 0, function* () {
                    yield navigator.clipboard.writeText(base58);
                }), icon: React.createElement(CopyIcon, { style: { fontSize: 20, marginRight: 12 } }), style: { padding: 0, paddingLeft: 12, paddingRight: 16, paddingTop: 8, paddingBottom: 8 } }, "Copy address"),
            React.createElement(Menu.Item, { onClick: () => setTimeout(() => setVisible(true), 100), icon: React.createElement(SwitchIcon, { style: { fontSize: 20, marginRight: 12 } }), style: { padding: 0, paddingLeft: 12, paddingRight: 16, paddingTop: 8, paddingBottom: 8 } }, "Connect a different wallet"),
            React.createElement(Menu.Item, { onClick: () => {
                    // eslint-disable-next-line @typescript-eslint/no-empty-function
                    disconnect().catch(() => { });
                }, icon: React.createElement(DisconnectIcon, { style: { fontSize: 20, marginRight: 12 } }), style: { padding: 0, paddingLeft: 12, paddingRight: 16, paddingTop: 8, paddingBottom: 8 } }, "Disconnect")), trigger: ['click'] },
        React.createElement(Button, Object.assign({ icon: React.createElement(WalletIcon, { wallet: wallet }), type: type, size: size }, props), content)));
};
//# sourceMappingURL=WalletMultiButton.js.map